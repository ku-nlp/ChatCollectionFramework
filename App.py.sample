from server.utils import load_config
from server.base import BaseApi, BaseApp
import logging
import logging.config


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="Launch the Server.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--port", help="Listening port to handle requests.", type=int, default=8888)
    parser.add_argument("--config", help="Location of config file.", type=str, default="config.json")
    parser.add_argument("--log_config", help="Log configuration file.", type=str, default="logging.conf")
    args = parser.parse_args(args=None)

    cfg = load_config()

    SESSION_TYPE = 'filesystem'
    SESSION_COOKIE_NAME = 'CGISESSID'
    SESSION_FILE_DIR = cfg['sessions']
    SESSION_COOKIE_PATH = cfg['cookiePath']
    SESSION_COOKIE_SECURE = True

    class Api(BaseApi):

        def __init__(self, cfg, logger):
            BaseApi.__init__(self, cfg, logger)

        # To override an existing behavior defined in BaseApi.
        # def version(self):
        #     return "My special version X.Y"


    class App(BaseApp):

        def __init__(self, import_name, api):
            BaseApp.__init__(self, import_name, api)

            # To add a new route:
            # @self.route('/{}/test'.format(self.cfg['web_context']))
            # def test():
            #     return "test: new view"

        # To override an existing behavior defined in BaseApp.
        # You should try to override methods at the api level first.
        # But it's also possible to do it at the app level.
        # def version(self):
        #     return "2.0"

    logging.config.fileConfig(args.log_config)
    logger = logging.getLogger('default')
    api = Api(cfg, logger)
    app = App(__name__, api)
    app.run(host='0.0.0.0', port=args.port, debug=False, threaded=True)
